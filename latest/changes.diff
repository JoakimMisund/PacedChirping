
--- ./net-next/include/linux/tcp.h.original	2019-03-15 13:47:23.748866490 +0100
+++ ./net-next/include/linux/tcp.h	2019-03-15 13:47:23.648866430 +0100
@@ -144,6 +144,17 @@
 	return (struct tcp_request_sock *)req;
 }
 
+struct chirp {
+	u16 packets;
+	u16 packets_out;
+	u32 gap_ns;
+	u32 gap_step_ns;
+	u32 guard_interval_ns;
+	u32 begin_seq;
+	u32 end_seq;
+	u64 *scheduled_gaps;
+};
+
 struct tcp_sock {
 	/* inet_connection_sock has to be the first member of tcp_sock */
 	struct inet_connection_sock	inet_conn;
@@ -310,6 +321,13 @@
 	struct hrtimer	pacing_timer;
 	struct hrtimer	compressed_ack_timer;
 
+	
+	u32 is_chirping;
+	struct chirp chirp;
+	u32 disable_cwr_upon_ece;
+	u32 disable_kernel_pacing_calculation;
+	
+
 	/* from STCP, retrans queue hinting */
 	struct sk_buff* lost_skb_hint;
 	struct sk_buff *retransmit_skb_hint;
--- ./net-next/include/net/tcp.h.original	2019-03-15 13:47:24.028866658 +0100
+++ ./net-next/include/net/tcp.h	2019-03-15 13:47:23.888866574 +0100
@@ -1046,6 +1046,11 @@
 	 * after all the ca_state processing. (optional)
 	 */
 	void (*cong_control)(struct sock *sk, const struct rate_sample *rs);
+	/* call when congestion control indicates that it is sending chirps
+	 * and stack does not have a chirp description available.
+	 */
+	u32 (*new_chirp)(struct sock *sk);
+	
 	/* get info for inet_diag (optional) */
 	size_t (*get_info)(struct sock *sk, u32 ext, int *attr,
 			   union tcp_cc_info *info);
--- ./net-next/net/ipv4/tcp_output.c.original	2019-03-15 13:47:24.288866819 +0100
+++ ./net-next/net/ipv4/tcp_output.c	2019-03-15 13:47:24.148866732 +0100
@@ -985,15 +985,45 @@
 
 	if (sk->sk_pacing_status != SK_PACING_NONE) {
 		unsigned long rate = sk->sk_pacing_rate;
-
+		
+		if (tp->is_chirping) {
+			if (tp->chirp.packets > tp->chirp.packets_out) {
+			
+				struct chirp *chirp = &tp->chirp;
+				u64 len_ns = chirp->gap_ns;
+				u64 credit = tp->tcp_wstamp_ns - prior_wstamp;
+
+				chirp->gap_ns = (chirp->gap_step_ns > chirp->gap_ns) ?
+					0 : chirp->gap_ns - chirp->gap_step_ns;
+				chirp->packets_out++;
+
+				if (chirp->packets_out == 1U) {
+					chirp->begin_seq = tp->snd_nxt;
+					credit = 0;
+				}
+				
+				if (chirp->packets_out == chirp->packets) {
+					tp->tcp_wstamp_ns += chirp->guard_interval_ns; /*Don't care about credits here*/
+					chirp->end_seq = tp->snd_nxt + skb->len;
+					inet_csk(sk)->icsk_ca_ops->new_chirp(sk);
+				} else {
+					/* take into account OS jitter */
+					len_ns -= min_t(u64, len_ns / 2, credit);
+					tp->tcp_wstamp_ns += len_ns;
+					if (chirp->scheduled_gaps) {
+						chirp->scheduled_gaps[chirp->packets_out] = credit + len_ns;
+					}
+				}
+			}
+		}
 		/* Original sch_fq does not pace first 10 MSS
 		 * Note that tp->data_segs_out overflows after 2^32 packets,
 		 * this is a minor annoyance.
 		 */
-		if (rate != ~0UL && rate && tp->data_segs_out >= 10) {
+		else if (rate != ~0UL && rate && tp->data_segs_out >= 10) {
 			u64 len_ns = div64_ul((u64)skb->len * NSEC_PER_SEC, rate);
 			u64 credit = tp->tcp_wstamp_ns - prior_wstamp;
-
+				
 			/* take into account OS jitter */
 			len_ns -= min_t(u64, len_ns / 2, credit);
 			tp->tcp_wstamp_ns += len_ns;
@@ -2353,6 +2383,12 @@
 		if (tcp_pacing_check(sk))
 			break;
 
+		if (tp->is_chirping &&
+		    tp->chirp.packets <= tp->chirp.packets_out &&
+		    inet_csk(sk)->icsk_ca_ops->new_chirp(sk)) {
+			break;
+		}
+
 		tso_segs = tcp_init_tso_segs(skb, mss_now);
 		BUG_ON(!tso_segs);
 
@@ -2383,7 +2419,7 @@
 		}
 
 		limit = mss_now;
-		if (tso_segs > 1 && !tcp_urg_mode(tp))
+		if (!tp->is_chirping && tso_segs > 1 && !tcp_urg_mode(tp))
 			limit = tcp_mss_split_point(sk, skb, mss_now,
 						    min_t(unsigned int,
 							  cwnd_quota,
--- ./net-next/net/ipv4/tcp_minisocks.c.original	2019-03-15 13:47:24.560866987 +0100
+++ ./net-next/net/ipv4/tcp_minisocks.c	2019-03-15 13:47:24.420866901 +0100
@@ -482,6 +482,12 @@
 	INIT_LIST_HEAD(&newtp->tsq_node);
 	INIT_LIST_HEAD(&newtp->tsorted_sent_queue);
 
+	newtp->chirp.packets = newtp->chirp.packets_out = 0;
+	newtp->is_chirping = 0;
+	newtp->disable_cwr_upon_ece = 0;
+	newtp->disable_kernel_pacing_calculation = 0;
+	newtp->chirp.scheduled_gaps = NULL;
+
 	tcp_init_wl(newtp, treq->rcv_isn);
 
 	minmax_reset(&newtp->rtt_min, tcp_jiffies32, ~0U);
--- ./net-next/net/ipv4/tcp.c.original	2019-03-15 13:47:24.944867225 +0100
+++ ./net-next/net/ipv4/tcp.c	2019-03-15 13:47:24.744867101 +0100
@@ -415,6 +415,12 @@
 	INIT_LIST_HEAD(&tp->tsq_node);
 	INIT_LIST_HEAD(&tp->tsorted_sent_queue);
 
+	tp->chirp.packets = tp->chirp.packets_out = 0;
+	tp->is_chirping = 0;
+	tp->disable_cwr_upon_ece = 0;
+	tp->disable_kernel_pacing_calculation = 0;
+	tp->chirp.scheduled_gaps = NULL;
+
 	icsk->icsk_rto = TCP_TIMEOUT_INIT;
 	tp->mdev_us = jiffies_to_usecs(TCP_TIMEOUT_INIT);
 	minmax_reset(&tp->rtt_min, tcp_jiffies32, ~0U);
--- ./net-next/net/ipv4/sysctl_net_ipv4.c.original	2019-03-15 13:47:25.160867361 +0100
+++ ./net-next/net/ipv4/sysctl_net_ipv4.c	2019-03-15 13:47:25.080867311 +0100
@@ -1179,6 +1179,15 @@
 		.extra2		= &thousand,
 	},
 	{
+		.procname       = "tcp_delayed_acks",
+		.data           = &init_net.ipv4.sysctl_tcp_delayed_acks,
+		.maxlen         = sizeof(int),
+		.mode           = 0644,
+		.proc_handler   = proc_dointvec_minmax,
+		.extra1         = &zero,
+		.extra2         = &one,
+	},
+	{
 		.procname	= "tcp_pacing_ca_ratio",
 		.data		= &init_net.ipv4.sysctl_tcp_pacing_ca_ratio,
 		.maxlen		= sizeof(int),
--- ./net-next/net/ipv4/tcp_input.c.original	2019-03-15 13:47:25.524867593 +0100
+++ ./net-next/net/ipv4/tcp_input.c	2019-03-15 13:47:25.304867453 +0100
@@ -3306,7 +3306,8 @@
 		/* Advance cwnd if state allows */
 		tcp_cong_avoid(sk, ack, acked_sacked);
 	}
-	tcp_update_pacing_rate(sk);
+	if (!tcp_sk(sk)->disable_kernel_pacing_calculation)
+		tcp_update_pacing_rate(sk);
 }
 
 /* Check that window update is acceptable.
@@ -3641,7 +3642,8 @@
 							&sack_state);
 
 		if (tcp_ecn_rcv_ecn_echo(tp, tcp_hdr(skb))) {
-			flag |= FLAG_ECE;
+			if (likely(!tp->disable_cwr_upon_ece))
+				flag |= FLAG_ECE;
 			ack_ev_flags |= CA_ACK_ECE;
 		}
 
@@ -5173,8 +5175,12 @@
 	}
 
 	if (!ofo_possible || RB_EMPTY_ROOT(&tp->out_of_order_queue)) {
-		tcp_send_delayed_ack(sk);
-		return;
+		if (sock_net(sk)->ipv4.sysctl_tcp_delayed_acks) {
+			tcp_send_delayed_ack(sk);
+			return;
+		} 
+		/* Delayed acks disabled */
+		goto send_now;
 	}
 
 	if (!tcp_is_sack(tp) ||
@@ -6106,7 +6112,7 @@
 		if (tp->rx_opt.tstamp_ok)
 			tp->advmss -= TCPOLEN_TSTAMP_ALIGNED;
 
-		if (!inet_csk(sk)->icsk_ca_ops->cong_control)
+		if (!inet_csk(sk)->icsk_ca_ops->cong_control && !tp->disable_kernel_pacing_calculation)
 			tcp_update_pacing_rate(sk);
 
 		/* Prevent spurious tcp_cwnd_restart() on first data packet */
--- ./net-next/include/net/netns/ipv4.h.original	2019-03-15 13:47:25.700867705 +0100
+++ ./net-next/include/net/netns/ipv4.h	2019-03-15 13:47:25.636867665 +0100
@@ -162,6 +162,7 @@
 	int sysctl_tcp_invalid_ratelimit;
 	int sysctl_tcp_pacing_ss_ratio;
 	int sysctl_tcp_pacing_ca_ratio;
+	int sysctl_tcp_delayed_acks;
 	int sysctl_tcp_wmem[3];
 	int sysctl_tcp_rmem[3];
 	int sysctl_tcp_comp_sack_nr;
